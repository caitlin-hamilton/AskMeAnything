{"ast":null,"code":"var _jsxFileName = \"/Users/caitlinhamilton/Programming/askMeAnything/AskMeAnything/src/AdminQuestion.js\";\nimport React from 'react';\nimport { Draggable } from 'react-beautiful-dnd';\nimport { GoKebabHorizontal } from \"react-icons/go\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Dropdown from 'react-bootstrap/Dropdown';\nimport themes from './Themes';\nimport Button from '@material-ui/core/Button';\nimport AdminQuestionModal from './AdminQuestionModal';\nimport { AiFillCaretDown, AiFillCaretUp, AiFillEdit } from \"react-icons/ai\";\nimport { MdAddCircleOutline } from \"react-icons/md\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst grid = 8;\n\nconst getItemStyle = (isDragging, draggableStyle) => ({\n  userSelect: \"none\",\n  padding: grid * 2,\n  margin: `0 0 ${grid}px 0`,\n  background: isDragging ? \"lightgreen\" : \"lightgrey\",\n  ...draggableStyle\n});\n\nexport default class AdminQuestion extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      theme: \"Select Theme\",\n      isModalOpen: false,\n      answer: \"\",\n      showAnswer: false\n    };\n    this.updateTheme = this.updateTheme.bind(this);\n    this.addAnswer = this.addAnswer.bind(this);\n  }\n\n  componentDidMount() {\n    this.setState({\n      theme: \"Select Theme\",\n      answer: this.props.answer\n    });\n  }\n\n  updateTheme(evt) {\n    this.setState({\n      theme: evt\n    });\n  }\n\n  switchModal() {\n    this.setState({\n      isModalOpen: !this.state.isModalOpen\n    });\n  }\n\n  switchShowAnswer() {\n    this.setState({\n      showAnswer: !this.state.showAnswer\n    });\n  }\n\n  renderReply() {\n    if (this.state.answer != \"\") {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"answerContainer\",\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          onClick: () => this.switchShowAnswer(),\n          children: [\" \", this.state.showAnswer ? /*#__PURE__*/_jsxDEV(AiFillCaretUp, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 93\n          }, this) : /*#__PURE__*/_jsxDEV(AiFillCaretDown, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 112\n          }, this), \" Show Answer\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 17\n        }, this), this.state.showAnswer ? /*#__PURE__*/_jsxDEV(\"p\", {\n          children: this.state.answer\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 42\n        }, this) : /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 71\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 13\n      }, this);\n    }\n  }\n\n  addAnswer(answer) {\n    this.setState({\n      answer: answer\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(Draggable, {\n      draggableId: this.props.dragId,\n      index: this.props.index,\n      children: (provided, snapshot) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"adminPost\",\n        ref: provided.innerRef,\n        ...provided.draggableProps,\n        ...provided.dragHandleProps,\n        style: getItemStyle(snapshot.isDragging, provided.draggableProps.style),\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"question\",\n          children: this.props.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          className: \"editButton\",\n          onClick: () => this.switchModal(),\n          children: /*#__PURE__*/_jsxDEV(MdAddCircleOutline, {\n            size: 30\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 96\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(AdminQuestionModal, {\n          isModalOpen: this.state.isModalOpen,\n          addAnswer: this.addAnswer,\n          answer: this.state.answer,\n          switchModal: () => this.switchModal()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n          className: \"textStyle\",\n          children: [\"Votes: \", this.props.votes, \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n          className: \"textStyle\",\n          children: [\"Asked By: \", this.props.poster]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n          className: \"textStyle\",\n          children: [\"Posted: \", this.props.timePosted]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(Dropdown, {\n          onSelect: this.updateTheme,\n          title: /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Dropdown\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 74\n          }, this),\n          className: \"dropdown\",\n          children: [/*#__PURE__*/_jsxDEV(Dropdown.Toggle, {\n            className: \"dropdown\",\n            children: this.state.theme\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(Dropdown.Menu, {\n            className: \"dropdown\",\n            children: themes.map(item => /*#__PURE__*/_jsxDEV(Dropdown.Item, {\n              eventKey: item,\n              children: item\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 106,\n              columnNumber: 59\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 29\n        }, this), this.renderReply()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 21\n      }, this)\n    }, this.props.dragId, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/caitlinhamilton/Programming/askMeAnything/AskMeAnything/src/AdminQuestion.js"],"names":["React","Draggable","GoKebabHorizontal","Dropdown","themes","Button","AdminQuestionModal","AiFillCaretDown","AiFillCaretUp","AiFillEdit","MdAddCircleOutline","grid","getItemStyle","isDragging","draggableStyle","userSelect","padding","margin","background","AdminQuestion","Component","constructor","props","state","theme","isModalOpen","answer","showAnswer","updateTheme","bind","addAnswer","componentDidMount","setState","evt","switchModal","switchShowAnswer","renderReply","render","dragId","index","provided","snapshot","innerRef","draggableProps","dragHandleProps","style","text","votes","poster","timePosted","map","item"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Draggable } from 'react-beautiful-dnd';\nimport { GoKebabHorizontal } from \"react-icons/go\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Dropdown from 'react-bootstrap/Dropdown'\nimport themes from './Themes'\nimport Button from '@material-ui/core/Button';\nimport AdminQuestionModal from './AdminQuestionModal';\nimport {AiFillCaretDown, AiFillCaretUp, AiFillEdit} from \"react-icons/ai\";\nimport {MdAddCircleOutline} from \"react-icons/md\"\n\nconst grid = 8;\n\nconst getItemStyle = (isDragging, draggableStyle) => ({\n    userSelect: \"none\",\n    padding: grid * 2,\n    margin: `0 0 ${grid}px 0`,\n    background: isDragging ? \"lightgreen\" : \"lightgrey\",\n    ...draggableStyle\n  });\n\nexport default class AdminQuestion extends React.Component{\n\n    constructor(props){\n        super(props)\n        this.state ={\n            theme: \"Select Theme\",\n            isModalOpen: false,\n            answer: \"\",\n            showAnswer: false\n        }\n        this.updateTheme = this.updateTheme.bind(this);\n        this.addAnswer = this.addAnswer.bind(this);\n    }\n\n    componentDidMount(){\n        this.setState({\n            theme: \"Select Theme\",\n            answer: this.props.answer,\n\n        })\n    }\n\n    updateTheme(evt){\n        this.setState({\n            theme: evt\n        })\n    }\n\n    switchModal() {\n        this.setState({\n            isModalOpen: ! this.state.isModalOpen\n        })\n    }\n\n    switchShowAnswer(){\n        this.setState({\n            showAnswer: ! this.state.showAnswer\n        })\n    }\n\n\n    renderReply(){\n        if (this.state.answer != \"\"){\n            return (\n            <div className=\"answerContainer\">\n                <Button onClick= {() => this.switchShowAnswer()}> { this.state.showAnswer ? <AiFillCaretUp/> : <AiFillCaretDown/>} Show Answer</Button>\n                {this.state.showAnswer ? <p>{this.state.answer}</p> : <p></p>}\n            </div>\n            )\n        }\n    } \n\n    addAnswer(answer){\n        this.setState({\n            answer: answer\n        })\n    }\n\n    render() {\n        return (\n            <Draggable\n                key={this.props.dragId}\n                draggableId={this.props.dragId}\n                index={this.props.index}>\n                {(provided, snapshot) => (\n                    <div className=\"adminPost\"\n                        ref={provided.innerRef}\n                        {...provided.draggableProps}\n                        {...provided.dragHandleProps}\n                        style={getItemStyle(\n                            snapshot.isDragging,\n                            provided.draggableProps.style\n                        )}>\n                            <p className=\"question\">{this.props.text}</p>\n                            <Button className=\"editButton\" onClick={() => this.switchModal()}>{<MdAddCircleOutline size={30}/>}</Button>\n                            <AdminQuestionModal isModalOpen={this.state.isModalOpen} addAnswer={this.addAnswer} answer={this.state.answer} switchModal={() => this.switchModal()}/>\n                            <h5 className=\"textStyle\">Votes: {this.props.votes} </h5>\n                            <h5 className=\"textStyle\">Asked By: {this.props.poster}</h5>\n                            <h5 className=\"textStyle\">Posted: {this.props.timePosted}</h5>\n                            <Dropdown onSelect={this.updateTheme} title={<span>Dropdown</span>} className=\"dropdown\">\n                                <Dropdown.Toggle className=\"dropdown\">\n                                {this.state.theme}\n                                </Dropdown.Toggle>\n                                <Dropdown.Menu className=\"dropdown\">\n                                    {themes.map((item) => <Dropdown.Item eventKey={item}>{item}</Dropdown.Item>)}\n                                </Dropdown.Menu>\n                            </Dropdown>\n                            {this.renderReply()}\n                    </div>\n                )}\n            </Draggable>\n        )\n    }\n\n}\n"]},"metadata":{},"sourceType":"module"}