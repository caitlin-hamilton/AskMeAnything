[{"/Users/caitlinhamilton/Programming/askMeAnything/AskMeAnything/src/reportWebVitals.js":"1","/Users/caitlinhamilton/Programming/askMeAnything/AskMeAnything/src/Admin.js":"2","/Users/caitlinhamilton/Programming/askMeAnything/AskMeAnything/src/AdminQuestion.js":"3","/Users/caitlinhamilton/Programming/askMeAnything/AskMeAnything/src/ThemeModal.js":"4","/Users/caitlinhamilton/Programming/askMeAnything/AskMeAnything/src/Themes.js":"5","/Users/caitlinhamilton/Programming/askMeAnything/AskMeAnything/src/AdminQuestionModal.js":"6","/Users/caitlinhamilton/Programming/askMeAnything/AskMeAnything/src/TimeUtils.js":"7","/Users/caitlinhamilton/Programming/askMeAnything/AskMeAnything/src/index.tsx":"8","/Users/caitlinhamilton/Programming/askMeAnything/AskMeAnything/src/App.tsx":"9","/Users/caitlinhamilton/Programming/askMeAnything/AskMeAnything/src/Home.tsx":"10","/Users/caitlinhamilton/Programming/askMeAnything/AskMeAnything/src/api.tsx":"11","/Users/caitlinhamilton/Programming/askMeAnything/AskMeAnything/src/Post.tsx":"12","/Users/caitlinhamilton/Programming/askMeAnything/AskMeAnything/src/QuestionSubmit.tsx":"13"},{"size":362,"mtime":1634149473532,"results":"14","hashOfConfig":"15"},{"size":8850,"mtime":1634149473527,"results":"16","hashOfConfig":"15"},{"size":5132,"mtime":1640262645496,"results":"17","hashOfConfig":"15"},{"size":1637,"mtime":1634487942665,"results":"18","hashOfConfig":"15"},{"size":69,"mtime":1634149473531,"results":"19","hashOfConfig":"15"},{"size":930,"mtime":1634149473528,"results":"20","hashOfConfig":"15"},{"size":1495,"mtime":1640130354999,"results":"21","hashOfConfig":"15"},{"size":500,"mtime":1641218462382,"results":"22","hashOfConfig":"15"},{"size":1126,"mtime":1641046837649,"results":"23","hashOfConfig":"15"},{"size":5450,"mtime":1641225428174,"results":"24","hashOfConfig":"15"},{"size":520,"mtime":1641056337506,"results":"25","hashOfConfig":"15"},{"size":3913,"mtime":1641316279311,"results":"26","hashOfConfig":"15"},{"size":1992,"mtime":1641225492984,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"1mo5h6r",{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"30"},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"46"},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"/Users/caitlinhamilton/Programming/askMeAnything/AskMeAnything/src/reportWebVitals.js",[],["58","59"],"/Users/caitlinhamilton/Programming/askMeAnything/AskMeAnything/src/Admin.js",[],"/Users/caitlinhamilton/Programming/askMeAnything/AskMeAnything/src/AdminQuestion.js",["60","61","62"],"import React from 'react';\nimport { Draggable } from 'react-beautiful-dnd';\nimport { GoKebabHorizontal } from \"react-icons/go\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Dropdown from 'react-bootstrap/Dropdown'\nimport themes from './Themes'\nimport Button from '@material-ui/core/Button';\nimport AdminQuestionModal from './AdminQuestionModal';\nimport {AiFillCaretDown, AiFillCaretUp, AiFillEdit} from \"react-icons/ai\";\nimport {MdAddCircleOutline} from \"react-icons/md\";\n\nconst grid = 8;\n\nconst getItemStyle = (isDragging, draggableStyle) => ({\n    userSelect: \"none\",\n    padding: grid * 2,\n    margin: `0 0 ${grid}px 0`,\n    background: isDragging ? \"lightgreen\" : \"lightgrey\",\n    ...draggableStyle\n  });\n\nexport default class AdminQuestion extends React.Component{\n\n    constructor(props){\n        super(props)\n        this.state ={\n            theme: \"Select Theme\",\n            isModalOpen: false,\n            answer: \"\",\n            showAnswer: false\n        }\n        this.updateTheme = this.updateTheme.bind(this);\n        this.addAnswer = this.addAnswer.bind(this);\n    }\n\n    componentDidMount(){\n        this.setState({\n            theme: this.props.theme ? this.props.theme : \"Select Theme\",\n            answer: this.props.answer,\n        })\n    }\n\n    updateTheme(evt){\n        this.setState({\n            theme: evt\n        })\n\n        this.props.updateTheme(this.props.questionList, evt, this.props.dragId)\n    }\n\n    switchModal() {\n        this.setState({\n            isModalOpen: ! this.state.isModalOpen\n        })\n        //make this return a promise\n    }\n\n    switchShowAnswer(){\n        this.setState({\n            showAnswer: ! this.state.showAnswer\n        })\n    }\n\n\n    renderReply(){\n        if (this.state.answer != \"\"){\n            return (\n            <div className=\"answerContainer\">\n                <Button onClick= {() => this.switchShowAnswer()}> { this.state.showAnswer ? <AiFillCaretUp/> : <AiFillCaretDown/>} Show Answer</Button>\n                {this.state.showAnswer ? <p>{this.state.answer}</p> : <p></p>}\n            </div>\n            )\n        }\n    } \n\n    addAnswer(answer){\n        this.setState({\n            answer: answer\n        })\n    }\n\n    formatTime(timeInSeconds){\n        //new Date()/1000\n        const rtf1 = new Intl.RelativeTimeFormat('en', { style: 'narrow' });\n        const today = new Date()\n        let posted = new Date(timeInSeconds *1000)\n        const days = today.getUTCDate() - posted.getUTCDate()\n        const hours = today.getUTCHours() - posted.getUTCHours()\n        const minutes = today.getUTCMinutes() - posted.getUTCMinutes()\n        const seconds = today.getUTCSeconds() - posted.getUTCSeconds()\n        if (days >= 1){\n            return rtf1.format(-days, 'days')\n        }\n        else if (hours >= 1){\n            return rtf1.format(-hours, 'hours')\n        }\n        else if (minutes >= 1){\n            return rtf1.format(-minutes, 'minutes')\n        }\n        else {\n            return rtf1.format(-seconds, 'seconds')\n        }\n    }\n\n    render() {\n        return (\n            <Draggable\n                key={this.props.dragId}\n                draggableId={this.props.dragId}\n                index={this.props.index}>\n                {(provided, snapshot) => (\n                    <div className=\"adminPost\"\n                        ref={provided.innerRef}\n                        {...provided.draggableProps}\n                        {...provided.dragHandleProps}\n                        style={getItemStyle(\n                            snapshot.isDragging,\n                            provided.draggableProps.style\n                        )}>\n                            <p className=\"question\">{this.props.text}</p>\n                            <Button className=\"editButton\" onClick={() => this.switchModal()}>{<MdAddCircleOutline size={30}/>}</Button>\n                            <AdminQuestionModal isModalOpen={this.state.isModalOpen} addAnswer={this.addAnswer} answer={this.state.answer} switchModal={() => this.switchModal()}/>\n                            <div className=\"textContainer\">\n                                <h5 className=\"textStyle\">Votes: {this.props.votes} </h5>\n                                <h5 className=\"textStyle\">Asked By: {this.props.poster}</h5>\n                                <h5 className=\"textStyle\">Posted: {this.formatTime(this.props.timePosted)}</h5>\n                                <Dropdown onSelect={this.updateTheme} title={<span>Dropdown</span>} className=\"dropdown\">\n                                <Dropdown.Toggle className=\"dropdown\">\n                                {this.state.theme}\n                                </Dropdown.Toggle>\n                                <Dropdown.Menu className=\"dropdown\">\n                                    {themes.map((item) => <Dropdown.Item eventKey={item}>{item}</Dropdown.Item>)}\n                                </Dropdown.Menu>\n                            </Dropdown>\n                            </div>\n                            {this.renderReply()}\n                    </div>\n                )}\n            </Draggable>\n        )\n    }\n\n}\n","/Users/caitlinhamilton/Programming/askMeAnything/AskMeAnything/src/ThemeModal.js",[],"/Users/caitlinhamilton/Programming/askMeAnything/AskMeAnything/src/Themes.js",[],"/Users/caitlinhamilton/Programming/askMeAnything/AskMeAnything/src/AdminQuestionModal.js",[],"/Users/caitlinhamilton/Programming/askMeAnything/AskMeAnything/src/TimeUtils.js",["63","64"],"/Users/caitlinhamilton/Programming/askMeAnything/AskMeAnything/src/index.tsx",[],["65","66"],"/Users/caitlinhamilton/Programming/askMeAnything/AskMeAnything/src/App.tsx",[],"/Users/caitlinhamilton/Programming/askMeAnything/AskMeAnything/src/Home.tsx",["67","68"],"import {useState, useEffect} from 'react';\nimport Post from './Post'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Button from '@material-ui/core/Button';\nimport QuestionModal from './QuestionSubmit';\nimport Question from './Question'\nimport {AiOutlineArrowDown, AiOutlineArrowUp} from \"react-icons/ai\";\n\ninterface Props {\n    questions: Array<Question>;\n    userId: number;\n    userData: Array<number>;\n}\n\ninterface SortLogicI {\n    votes: string|boolean\n    timePosted: string|boolean\n}\n\nconst sortLogicObj: SortLogicI = {votes: false, timePosted: 'desc'}\n\nconst Home = (props: Props) => {\n    const [questions, setQuestions]  = useState<Question[]>([])\n    const [userData, setUserData] = useState(Array<number>())\n    const [isModalOpen, setIsModalOpen] = useState(false)\n    const [sortLogic, setSortLogic] = useState(sortLogicObj)\n\n    useEffect(() => {\n        //initial mount\n        sortQuestions('asc', props.questions, 'timePosted')\n        setUserData(props.userData)\n    }, [])\n\n    function sortQuestions(direction: string |boolean, data:Array<Question>, attribute: keyof Question) {\n        \n        let sortedData = [...data]\n        if(direction === 'desc'){\n            sortedData.sort((a, b) => {\n                if (a[attribute] >= b[attribute]) {\n                    return 1;\n                }\n            \n                else if (a[attribute] < b[attribute]) {\n                    return -1;\n                }\n                else {\n                    return 0;\n                }\n        })\n        updateSortLogic(attribute, 'desc')\n    }\n        else {\n            sortedData.sort((a, b) => {\n                if (a[attribute] < b[attribute]) {\n                    return 1;\n                }\n            \n                if (a[attribute] >= b[attribute]) {\n                    return -1;\n                }\n            \n                return 0;\n        })\n        updateSortLogic(attribute, 'asc')\n        }\n    setQuestions(sortedData)\n    }\n\n    function updateSortLogic(attribute: keyof Question, direction: string) {\n        let updatedSortLogic = {...sortLogic}\n        let objKeys = Object.keys(updatedSortLogic) as Array<keyof SortLogicI>\n\n        objKeys.forEach(v => {\n            if(v === attribute){\n                updatedSortLogic[v] = direction\n            }\n            else {\n                updatedSortLogic[v] = false \n            }\n        })\n        setSortLogic(updatedSortLogic)\n    }\n    function hasUserVoted(postId: number){\n        let result = false\n        userData.map((questionId)=> {\n            if(questionId === Number(postId)){\n                result = true\n            }\n        })\n        return result\n    }\n    function incrementVote(postId:number){\n        let newQuestionData = questions.map((post) => {\n            if(post.id ===  postId){\n                post.votes = post.votes + 1\n            }\n            return post\n        })\n        let newUserData: number[] = [...userData]\n        newUserData.push(postId)\n\n        setUserData(newUserData)\n        setQuestions(newQuestionData)\n    }\n\n    function decrementVote(postId:number){\n        let newQuestionData = questions.map((post) => {\n            if(post.id ===  postId){\n                post.votes = post.votes - 1\n            }\n            return post\n        })\n        let newUserData: number[] = userData.filter((element) => {\n            return element !== postId\n        })\n\n        setUserData(newUserData)\n        setQuestions(newQuestionData)\n    }\n\n\n    function switchModal() {\n        isModalOpen ? setIsModalOpen(false) : setIsModalOpen(true)\n    }\n\n    function getNewSortDirection(attribute: keyof SortLogicI){\n        const oldDirection: string|boolean = sortLogic[attribute]\n        return !oldDirection || oldDirection === 'desc' ? 'asc' : 'desc'\n    }\n\n    function addNewQuestion(newQuestion: Question){\n        questions.unshift(newQuestion)\n    }\n\n    function buttonAttributeDirecton(attribute: keyof SortLogicI){\n        const direction = sortLogic[attribute]\n        if(direction === 'asc'){\n            return <AiOutlineArrowDown />\n        }\n        else if(direction === 'desc') {\n            return <AiOutlineArrowUp />\n        }\n        else {\n            return\n        }\n    }\n    return (\n        <div className=\"container\">\n                <div className=\"submitQuestionContainer\">\n                    <textarea onClick={() => switchModal()} placeholder='Ask us anything...' className=\"submitQuestionText\"/>\n                    <QuestionModal isModalOpen={isModalOpen} switchModal={() => switchModal()} addNewQuestion={addNewQuestion}/>\n                </div> \n                <Button className=\"adminButton\" onClick={() => {sortQuestions(getNewSortDirection('votes'), questions, 'votes')}}>Popular {buttonAttributeDirecton('votes')}</Button>\n                <Button className=\"adminButton\" onClick={() => {sortQuestions(getNewSortDirection('timePosted'), questions, 'timePosted')}}>Most Recent {buttonAttributeDirecton('timePosted')}</Button>\n                <div className=\"postContainer\">\n                    {questions.map((item) => \n                    <Post votes={item.votes} submitter={item.poster} text={item.text} id={item.id} key={item.id} timePosted={Number(item.timePosted)} incrementVote={incrementVote} decrementVote={decrementVote} hasUserVoted={hasUserVoted(item.id)} answer={item.answer}/>)}\n                </div>\n            </div>\n    )\n}\n\nexport default Home","/Users/caitlinhamilton/Programming/askMeAnything/AskMeAnything/src/api.tsx",[],"/Users/caitlinhamilton/Programming/askMeAnything/AskMeAnything/src/Post.tsx",["69","70","71","72","73","74"],"/Users/caitlinhamilton/Programming/askMeAnything/AskMeAnything/src/QuestionSubmit.tsx",[],{"ruleId":"75","replacedBy":"76"},{"ruleId":"77","replacedBy":"78"},{"ruleId":"79","severity":1,"message":"80","line":3,"column":10,"nodeType":"81","messageId":"82","endLine":3,"endColumn":27},{"ruleId":"79","severity":1,"message":"83","line":9,"column":41,"nodeType":"81","messageId":"82","endLine":9,"endColumn":51},{"ruleId":"84","severity":1,"message":"85","line":66,"column":31,"nodeType":"86","messageId":"87","endLine":66,"endColumn":33},{"ruleId":"88","severity":1,"message":"89","line":2,"column":18,"nodeType":"81","messageId":"90","endLine":2,"endColumn":24},{"ruleId":"84","severity":1,"message":"91","line":44,"column":49,"nodeType":"86","messageId":"87","endLine":44,"endColumn":51},{"ruleId":"75","replacedBy":"76"},{"ruleId":"77","replacedBy":"78"},{"ruleId":"92","severity":1,"message":"93","line":32,"column":8,"nodeType":"94","endLine":32,"endColumn":10,"suggestions":"95"},{"ruleId":"96","severity":1,"message":"97","line":85,"column":34,"nodeType":"98","messageId":"99","endLine":85,"endColumn":36},{"ruleId":"92","severity":1,"message":"100","line":23,"column":5,"nodeType":"81","endLine":23,"endColumn":14,"suggestions":"101"},{"ruleId":"84","severity":1,"message":"91","line":57,"column":23,"nodeType":"86","messageId":"87","endLine":57,"endColumn":25},{"ruleId":"84","severity":1,"message":"91","line":60,"column":23,"nodeType":"86","messageId":"87","endLine":60,"endColumn":25},{"ruleId":"102","severity":1,"message":"103","line":60,"column":27,"nodeType":"104","messageId":"105","endLine":60,"endColumn":29},{"ruleId":"84","severity":1,"message":"91","line":60,"column":36,"nodeType":"86","messageId":"87","endLine":60,"endColumn":38},{"ruleId":"102","severity":1,"message":"103","line":60,"column":54,"nodeType":"104","messageId":"105","endLine":60,"endColumn":56},"no-native-reassign",["106"],"no-negated-in-lhs",["107"],"no-unused-vars","'GoKebabHorizontal' is defined but never used.","Identifier","unusedVar","'AiFillEdit' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","no-use-before-define","'define' was used before it was defined.","usedBeforeDefined","Expected '===' and instead saw '=='.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'props.questions', 'props.userData', and 'sortQuestions'. Either include them or remove the dependency array. If 'setUserData' needs the current value of 'props.userData', you can also switch to useReducer instead of useState and read 'props.userData' in the reducer.","ArrayExpression",["108"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","React Hook useEffect contains a call to 'setUserVoted'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [props.hasUserVoted] as a second argument to the useEffect Hook.",["109"],"no-mixed-operators","Unexpected mix of '||' and '&&'. Use parentheses to clarify the intended order of operations.","LogicalExpression","unexpectedMixedOperator","no-global-assign","no-unsafe-negation",{"desc":"110","fix":"111"},{"desc":"112","fix":"113"},"Update the dependencies array to be: [props.questions, props.userData, sortQuestions]",{"range":"114","text":"115"},"Add dependencies array: [props.hasUserVoted]",{"range":"116","text":"117"},[995,997],"[props.questions, props.userData, sortQuestions]",[666,666],", [props.hasUserVoted]"]