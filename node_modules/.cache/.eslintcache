[{"/Users/caitlinhamilton/Programming/askMeAnything/AskMeAnything/src/reportWebVitals.js":"1","/Users/caitlinhamilton/Programming/askMeAnything/AskMeAnything/src/index.tsx":"2","/Users/caitlinhamilton/Programming/askMeAnything/AskMeAnything/src/App.tsx":"3","/Users/caitlinhamilton/Programming/askMeAnything/AskMeAnything/src/api.tsx":"4","/Users/caitlinhamilton/Programming/askMeAnything/AskMeAnything/src/admin_components/Admin.js":"5","/Users/caitlinhamilton/Programming/askMeAnything/AskMeAnything/src/user_components/Home.tsx":"6","/Users/caitlinhamilton/Programming/askMeAnything/AskMeAnything/src/admin_components/AdminQuestion.js":"7","/Users/caitlinhamilton/Programming/askMeAnything/AskMeAnything/src/admin_components/Themes.js":"8","/Users/caitlinhamilton/Programming/askMeAnything/AskMeAnything/src/admin_components/ThemeModal.js":"9","/Users/caitlinhamilton/Programming/askMeAnything/AskMeAnything/src/user_components/Post.tsx":"10","/Users/caitlinhamilton/Programming/askMeAnything/AskMeAnything/src/user_components/QuestionSubmit.tsx":"11","/Users/caitlinhamilton/Programming/askMeAnything/AskMeAnything/src/admin_components/AdminQuestionModal.js":"12"},{"size":362,"mtime":1634149473532,"results":"13","hashOfConfig":"14"},{"size":500,"mtime":1641218462382,"results":"15","hashOfConfig":"14"},{"size":1117,"mtime":1641651431722,"results":"16","hashOfConfig":"14"},{"size":674,"mtime":1641651489787,"results":"17","hashOfConfig":"14"},{"size":8830,"mtime":1641648733518,"results":"18","hashOfConfig":"14"},{"size":5509,"mtime":1641650627138,"results":"19","hashOfConfig":"14"},{"size":5132,"mtime":1641648602206,"results":"20","hashOfConfig":"14"},{"size":69,"mtime":1641648627616,"results":"21","hashOfConfig":"14"},{"size":1637,"mtime":1641648730975,"results":"22","hashOfConfig":"14"},{"size":3605,"mtime":1641650549167,"results":"23","hashOfConfig":"14"},{"size":2141,"mtime":1641650409324,"results":"24","hashOfConfig":"14"},{"size":930,"mtime":1641648638381,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"1mo5h6r",{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"32","messages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"31"},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"28"},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"31"},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"/Users/caitlinhamilton/Programming/askMeAnything/AskMeAnything/src/reportWebVitals.js",[],["55","56"],"/Users/caitlinhamilton/Programming/askMeAnything/AskMeAnything/src/index.tsx",[],["57","58"],"/Users/caitlinhamilton/Programming/askMeAnything/AskMeAnything/src/App.tsx",[],"/Users/caitlinhamilton/Programming/askMeAnything/AskMeAnything/src/api.tsx",[],"/Users/caitlinhamilton/Programming/askMeAnything/AskMeAnything/src/admin_components/Admin.js",[],"/Users/caitlinhamilton/Programming/askMeAnything/AskMeAnything/src/user_components/Home.tsx",["59","60"],"import {useState, useEffect} from 'react';\nimport Post from './Post'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Button from '@material-ui/core/Button';\nimport QuestionModal from './QuestionSubmit';\nimport Question from '../Question'\nimport {AiOutlineArrowDown, AiOutlineArrowUp} from \"react-icons/ai\";\nimport '../App.css'\n\ninterface Props {\n    getQuestions(): Array<Question>;\n    userId: string;\n    getUserData(userId: string): Array<string>;\n}\n\ninterface SortLogicI {\n    votes: string|boolean\n    timePosted: string|boolean\n}\n\nconst sortLogicObj: SortLogicI = {votes: false, timePosted: 'desc'}\n\nconst Home = (props: Props) => {\n    const [questions, setQuestions]  = useState(Array<Question>())\n    const [userData, setUserData] = useState(Array<string>())\n    const [isModalOpen, setIsModalOpen] = useState(false)\n    const [sortLogic, setSortLogic] = useState(sortLogicObj)\n\n    useEffect(() => {\n        //initial mount\n        sortQuestions('asc', props.getQuestions(), 'timePosted')\n        setUserData(props.getUserData(props.userId))\n    }, [])\n\n    function sortQuestions(direction: string |boolean, data:Array<Question>, attribute: keyof Question) {\n        let sortedData = [...data]\n        if(direction === 'desc'){\n            sortedData.sort((a, b) => {\n                if (a[attribute] >= b[attribute]) {\n                    return 1;\n                }\n            \n                else if (a[attribute] < b[attribute]) {\n                    return -1;\n                }\n                else {\n                    return 0;\n                }\n        })\n        updateSortLogic(attribute, 'desc')\n    }\n        else {\n            sortedData.sort((a, b) => {\n                if (a[attribute] < b[attribute]) {\n                    return 1;\n                }\n            \n                if (a[attribute] >= b[attribute]) {\n                    return -1;\n                }\n            \n                return 0;\n        })\n        updateSortLogic(attribute, 'asc')\n        }\n    setQuestions(sortedData)\n    }\n\n    function updateSortLogic(attribute: keyof Question, direction: string) {\n        let updatedSortLogic = {...sortLogic}\n        let objKeys = Object.keys(updatedSortLogic) as Array<keyof SortLogicI>\n\n        objKeys.forEach(key => {\n            if(key === attribute){\n                updatedSortLogic[key] = direction\n            }\n            else {\n                updatedSortLogic[key] = false \n            }\n        })\n        setSortLogic(updatedSortLogic)\n    }\n    function incrementVote(postId:string){\n        let newQuestionData = questions.map((post) => {\n            if(post.id ===  postId){\n                post.votes = post.votes + 1\n            }\n            return post\n        })\n        let newUserData: string[] = [...userData]\n        newUserData.push(postId)\n\n        setUserData(newUserData)\n        setQuestions(newQuestionData)\n    }\n\n    function decrementVote(postId:string){\n        let newQuestionData = questions.map((post) => {\n            if(post.id ===  postId){\n                post.votes = post.votes - 1\n            }\n            return post\n        })\n        let newUserData: string[] = userData.filter((element) => {\n            return element !== postId\n        })\n\n        setUserData(newUserData)\n        setQuestions(newQuestionData)\n    }\n    function hasUserVoted(postId: string){\n        let result = false\n        userData.map((questionId)=> {\n            if(questionId === postId){\n                result = true\n            }\n        })\n        return result\n    }\n    function switchModal() {\n        isModalOpen ? setIsModalOpen(false) : setIsModalOpen(true)\n    }\n\n    function getNewSortDirection(attribute: keyof SortLogicI){\n        const oldDirection: string|boolean = sortLogic[attribute]\n        return !oldDirection || oldDirection === 'desc' ? 'asc' : 'desc'\n    }\n\n    function addNewQuestion(newQuestion: Question){\n        questions.unshift(newQuestion)\n    }\n\n    function buttonAttributeDirecton(attribute: keyof SortLogicI){\n        const direction = sortLogic[attribute]\n        if(direction === 'asc'){\n            return <AiOutlineArrowDown />\n        }\n        else if(direction === 'desc') {\n            return <AiOutlineArrowUp />\n        }\n        else {\n            return\n        }\n    }\n    return (\n        <div className=\"container\">\n                <div className=\"submitQuestionContainer\">\n                    <textarea onClick={() => switchModal()} placeholder='Ask us anything...' className=\"submitQuestionText\"/>\n                    <QuestionModal isModalOpen={isModalOpen} switchModal={() => switchModal()} addNewQuestion={addNewQuestion}/>\n                </div> \n                <Button className=\"adminButton\" onClick={() => {sortQuestions(getNewSortDirection('votes'), questions, 'votes')}}>Popular {buttonAttributeDirecton('votes')}</Button>\n                <Button className=\"adminButton\" onClick={() => {sortQuestions(getNewSortDirection('timePosted'), questions, 'timePosted')}}>Most Recent {buttonAttributeDirecton('timePosted')}</Button>\n                <div className=\"postContainer\">\n                    {questions.map((item) => \n                    <Post votes={item.votes} submitter={item.poster} text={item.text} id={item.id} key={item.id} timePosted={Number(item.timePosted)} incrementVote={incrementVote} decrementVote={decrementVote} hasUserVoted={hasUserVoted(item.id)} answer={item.answer}/>)}\n                </div>\n            </div>\n    )\n}\n\nexport default Home","/Users/caitlinhamilton/Programming/askMeAnything/AskMeAnything/src/admin_components/AdminQuestion.js",["61","62","63"],"import React from 'react';\nimport { Draggable } from 'react-beautiful-dnd';\nimport { GoKebabHorizontal } from \"react-icons/go\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Dropdown from 'react-bootstrap/Dropdown'\nimport themes from './Themes'\nimport Button from '@material-ui/core/Button';\nimport AdminQuestionModal from './AdminQuestionModal';\nimport {AiFillCaretDown, AiFillCaretUp, AiFillEdit} from \"react-icons/ai\";\nimport {MdAddCircleOutline} from \"react-icons/md\";\n\nconst grid = 8;\n\nconst getItemStyle = (isDragging, draggableStyle) => ({\n    userSelect: \"none\",\n    padding: grid * 2,\n    margin: `0 0 ${grid}px 0`,\n    background: isDragging ? \"lightgreen\" : \"lightgrey\",\n    ...draggableStyle\n  });\n\nexport default class AdminQuestion extends React.Component{\n\n    constructor(props){\n        super(props)\n        this.state ={\n            theme: \"Select Theme\",\n            isModalOpen: false,\n            answer: \"\",\n            showAnswer: false\n        }\n        this.updateTheme = this.updateTheme.bind(this);\n        this.addAnswer = this.addAnswer.bind(this);\n    }\n\n    componentDidMount(){\n        this.setState({\n            theme: this.props.theme ? this.props.theme : \"Select Theme\",\n            answer: this.props.answer,\n        })\n    }\n\n    updateTheme(evt){\n        this.setState({\n            theme: evt\n        })\n\n        this.props.updateTheme(this.props.questionList, evt, this.props.dragId)\n    }\n\n    switchModal() {\n        this.setState({\n            isModalOpen: ! this.state.isModalOpen\n        })\n        //make this return a promise\n    }\n\n    switchShowAnswer(){\n        this.setState({\n            showAnswer: ! this.state.showAnswer\n        })\n    }\n\n\n    renderReply(){\n        if (this.state.answer != \"\"){\n            return (\n            <div className=\"answerContainer\">\n                <Button onClick= {() => this.switchShowAnswer()}> { this.state.showAnswer ? <AiFillCaretUp/> : <AiFillCaretDown/>} Show Answer</Button>\n                {this.state.showAnswer ? <p>{this.state.answer}</p> : <p></p>}\n            </div>\n            )\n        }\n    } \n\n    addAnswer(answer){\n        this.setState({\n            answer: answer\n        })\n    }\n\n    formatTime(timeInSeconds){\n        //new Date()/1000\n        const rtf1 = new Intl.RelativeTimeFormat('en', { style: 'narrow' });\n        const today = new Date()\n        let posted = new Date(timeInSeconds *1000)\n        const days = today.getUTCDate() - posted.getUTCDate()\n        const hours = today.getUTCHours() - posted.getUTCHours()\n        const minutes = today.getUTCMinutes() - posted.getUTCMinutes()\n        const seconds = today.getUTCSeconds() - posted.getUTCSeconds()\n        if (days >= 1){\n            return rtf1.format(-days, 'days')\n        }\n        else if (hours >= 1){\n            return rtf1.format(-hours, 'hours')\n        }\n        else if (minutes >= 1){\n            return rtf1.format(-minutes, 'minutes')\n        }\n        else {\n            return rtf1.format(-seconds, 'seconds')\n        }\n    }\n\n    render() {\n        return (\n            <Draggable\n                key={this.props.dragId}\n                draggableId={this.props.dragId}\n                index={this.props.index}>\n                {(provided, snapshot) => (\n                    <div className=\"adminPost\"\n                        ref={provided.innerRef}\n                        {...provided.draggableProps}\n                        {...provided.dragHandleProps}\n                        style={getItemStyle(\n                            snapshot.isDragging,\n                            provided.draggableProps.style\n                        )}>\n                            <p className=\"question\">{this.props.text}</p>\n                            <Button className=\"editButton\" onClick={() => this.switchModal()}>{<MdAddCircleOutline size={30}/>}</Button>\n                            <AdminQuestionModal isModalOpen={this.state.isModalOpen} addAnswer={this.addAnswer} answer={this.state.answer} switchModal={() => this.switchModal()}/>\n                            <div className=\"textContainer\">\n                                <h5 className=\"textStyle\">Votes: {this.props.votes} </h5>\n                                <h5 className=\"textStyle\">Asked By: {this.props.poster}</h5>\n                                <h5 className=\"textStyle\">Posted: {this.formatTime(this.props.timePosted)}</h5>\n                                <Dropdown onSelect={this.updateTheme} title={<span>Dropdown</span>} className=\"dropdown\">\n                                <Dropdown.Toggle className=\"dropdown\">\n                                {this.state.theme}\n                                </Dropdown.Toggle>\n                                <Dropdown.Menu className=\"dropdown\">\n                                    {themes.map((item) => <Dropdown.Item eventKey={item}>{item}</Dropdown.Item>)}\n                                </Dropdown.Menu>\n                            </Dropdown>\n                            </div>\n                            {this.renderReply()}\n                    </div>\n                )}\n            </Draggable>\n        )\n    }\n\n}\n","/Users/caitlinhamilton/Programming/askMeAnything/AskMeAnything/src/admin_components/Themes.js",[],"/Users/caitlinhamilton/Programming/askMeAnything/AskMeAnything/src/admin_components/ThemeModal.js",[],"/Users/caitlinhamilton/Programming/askMeAnything/AskMeAnything/src/user_components/Post.tsx",["64","65","66","67","68","69"],"import {useState, useEffect} from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { FaThumbsUp, FaRegThumbsUp} from \"react-icons/fa\";\nimport Button from '@material-ui/core/Button';\n\ninterface Props {\n    text: string;\n    answer: string;\n    submitter: string;\n    id: string;\n    votes: number;\n    hasUserVoted: boolean;\n    timePosted: number;\n    incrementVote(id: string): any\n    decrementVote(id: string): any\n}\n\nconst Post = (props: Props) => {\n    const [showAnswer, setShowAnswer] = useState(false)\n    const [userVoted, setUserVoted] = useState(false)\n\n    useEffect(() => {\n        setUserVoted(props.hasUserVoted)\n    })\n\n    function formatTime(timeInSeconds: number){\n        //new Date()/1000\n        const rtf1 = new Intl.RelativeTimeFormat('en', { style: 'narrow' });\n        const today = new Date()\n        let posted = new Date(timeInSeconds *1000)\n        const days = today.getUTCDate() - posted.getUTCDate()\n        const hours = today.getUTCHours() - posted.getUTCHours()\n        const minutes = today.getUTCMinutes() - posted.getUTCMinutes()\n        const seconds = today.getUTCSeconds() - posted.getUTCSeconds()\n        if (days >= 1){\n            return rtf1.format(-days, 'days')\n        }\n        else if (hours > 1 && minutes <0){\n            return rtf1.format(-hours+1, 'hours')\n        }\n        else if(hours > 1 && minutes > 0){\n            return rtf1.format(-hours, 'hours')\n        }\n        else if(hours ==1 && minutes <=0 && (60+minutes) > 1){\n            return rtf1.format(minutes, 'minutes')\n        }\n        else if(hours ==1 || hours ==0 && minutes <0 && seconds <0){\n            return rtf1.format(-(60+seconds), 'seconds')\n        }\n        else if (minutes >= 1){\n            return rtf1.format(-minutes, 'minutes')\n        }\n        else if(seconds >= 0){\n            return rtf1.format(-seconds, 'seconds')\n        }\n        else if(seconds < 0){\n            return rtf1.format(seconds, 'seconds')\n        }\n    }\n\n    function renderVoteButton() {\n        if (userVoted === true){\n            return <FaThumbsUp size='20px' className=\"voteIcon\" onClick={() => props.decrementVote(props.id)}/>\n        }\n        else\n        {\n            return <FaRegThumbsUp size='20px' className=\"voteIcon\" onClick={() => props.incrementVote(props.id)}/>\n        }\n    }\n\n    function toggleAnswer(){\n        setShowAnswer(!showAnswer)\n    }\n\n    function renderReply(){\n        if (props.answer && showAnswer){\n            return (\n                <p>{props.answer}</p>\n            )\n        }\n        else if (!props.answer) return (\n            <div className='answerDiv2'>\n                <p>No Answer yet..</p>\n            </div>\n        )\n    }\n\n    function answerButtonText(){\n        if(showAnswer){\n            return 'Hide Answer'\n        }\n        else {\n            return 'Show Answer'\n        }\n    }\n\n    return (\n        <div className=\"userPost\">\n            <div className='rowPost'>\n            <p className=\"userQuestion\">{props.text}</p>\n            <div className=\"likeContainer\">\n                {renderVoteButton()}\n                <p className=\"voteP\">{props.votes}</p>\n            </div>\n            </div>\n            <p className=\"askedBy\">Asked By: {props.submitter}</p>\n            <p>Posted: {formatTime(props.timePosted)}</p>\n            <div className=\"answerDiv\">\n                {props.answer ? <Button onClick={() => toggleAnswer()}>{answerButtonText()}</Button> : \"\"}\n                <div className=\"break\"></div>\n                {renderReply()}\n            </div>\n        </div>\n      );\n\n}\n\nexport default Post","/Users/caitlinhamilton/Programming/askMeAnything/AskMeAnything/src/user_components/QuestionSubmit.tsx",[],"/Users/caitlinhamilton/Programming/askMeAnything/AskMeAnything/src/admin_components/AdminQuestionModal.js",[],{"ruleId":"70","replacedBy":"71"},{"ruleId":"72","replacedBy":"73"},{"ruleId":"70","replacedBy":"71"},{"ruleId":"72","replacedBy":"73"},{"ruleId":"74","severity":1,"message":"75","line":33,"column":8,"nodeType":"76","endLine":33,"endColumn":10,"suggestions":"77"},{"ruleId":"78","severity":1,"message":"79","line":113,"column":34,"nodeType":"80","messageId":"81","endLine":113,"endColumn":36},{"ruleId":"82","severity":1,"message":"83","line":3,"column":10,"nodeType":"84","messageId":"85","endLine":3,"endColumn":27},{"ruleId":"82","severity":1,"message":"86","line":9,"column":41,"nodeType":"84","messageId":"85","endLine":9,"endColumn":51},{"ruleId":"87","severity":1,"message":"88","line":66,"column":31,"nodeType":"89","messageId":"90","endLine":66,"endColumn":33},{"ruleId":"74","severity":1,"message":"91","line":22,"column":5,"nodeType":"84","endLine":22,"endColumn":14,"suggestions":"92"},{"ruleId":"87","severity":1,"message":"93","line":44,"column":23,"nodeType":"89","messageId":"90","endLine":44,"endColumn":25},{"ruleId":"87","severity":1,"message":"93","line":47,"column":23,"nodeType":"89","messageId":"90","endLine":47,"endColumn":25},{"ruleId":"94","severity":1,"message":"95","line":47,"column":27,"nodeType":"96","messageId":"97","endLine":47,"endColumn":29},{"ruleId":"87","severity":1,"message":"93","line":47,"column":36,"nodeType":"89","messageId":"90","endLine":47,"endColumn":38},{"ruleId":"94","severity":1,"message":"95","line":47,"column":54,"nodeType":"96","messageId":"97","endLine":47,"endColumn":56},"no-native-reassign",["98"],"no-negated-in-lhs",["99"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'props' and 'sortQuestions'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["100"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-unused-vars","'GoKebabHorizontal' is defined but never used.","Identifier","unusedVar","'AiFillEdit' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","React Hook useEffect contains a call to 'setUserVoted'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [props.hasUserVoted] as a second argument to the useEffect Hook.",["101"],"Expected '===' and instead saw '=='.","no-mixed-operators","Unexpected mix of '||' and '&&'. Use parentheses to clarify the intended order of operations.","LogicalExpression","unexpectedMixedOperator","no-global-assign","no-unsafe-negation",{"desc":"102","fix":"103"},{"desc":"104","fix":"105"},"Update the dependencies array to be: [props, sortQuestions]",{"range":"106","text":"107"},"Add dependencies array: [props.hasUserVoted]",{"range":"108","text":"109"},[1065,1067],"[props, sortQuestions]",[647,647],", [props.hasUserVoted]"]